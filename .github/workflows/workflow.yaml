name: "Deployment pipeline"

env:
  AWS_REGION: af-south-1

on:
  push:
    branches:
      # - main
      - dev
      - pipeline-setup

jobs:
  terraform:
    permissions:
      id-token: write
      contents: read
    name: "Manage AWS Resources"
    runs-on: ubuntu-latest
    outputs:
      dbhost: ${{ steps.tf_outputs.outputs.dbhost }}
      apiec2host: ${{ steps.tf_outputs.outputs.apiec2host }}
      webec2host: ${{ steps.tf_outputs.outputs.webec2host }}
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::804180393465:role/github-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure S3 bucket exists for backend
        run: |
          BUCKET_NAME="pear-bucket-tf-state"
          REGION="${{ env.AWS_REGION }}"
          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Bucket does not exist. Creating..."
            aws s3api create-bucket --bucket "$BUCKET_NAME" --region "$REGION" \
              --create-bucket-configuration LocationConstraint="$REGION"
          else
            echo "Bucket already exists."
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=pear-bucket-tf-state" -backend-config="key=terraformstate/terraform.tfstate" -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Capture Terraform Outputs
        id: tf_outputs
        run: |
          echo "dbhost=$(terraform output -raw db_host)" >> $GITHUB_OUTPUT
          echo "apiec2host=$(terraform output -raw api_ec2_host)" >> $GITHUB_OUTPUT
          echo "webec2host=$(terraform output -raw web_ec2_host)" >> $GITHUB_OUTPUT

  build-front-end:
    name: Build front-end
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install required dependencies
        run: npm install
        working-directory: pear-frontend

      - name: Build application
        run: npm run build
        working-directory: pear-frontend

      - name: Package application
        working-directory: pear-frontend
        run: |
          mkdir -p front-end-build
          cp -r build front-end-build/
          cp package.json front-end-build/
          zip -r front-end-build.zip front-end-build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: front-end-build
          path: pear-frontend/front-end-build.zip

  deploy-frontend:
    name: Deploy front-end to EC2
    permissions:
      id-token: write
      contents: read
    needs:
      - build-front-end
      - terraform
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::804180393465:role/github-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secrets from AWS Key Store
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            WEB_EC2_PRIVATE_KEY, webprivatekey

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: front-end-build

      - name: Setup private key
        run: |
          echo "${{ env.WEB_EC2_PRIVATE_KEY }}" > privatekey.pem
          chmod 0500 privatekey.pem

      - name: Install Node.js and dependencies on EC2
        run: |
          EC2_HOST=${{ needs.terraform.outputs.webec2host }}
          ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" '
            # Update package list
            sudo apt update
            
            # Install unzip and curl
            sudo apt install -y unzip curl
            
            # Install Node.js 20.x (LTS)
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
            
            # Install PM2 globally
            sudo npm install -g pm2
            
            # Verify installations
            echo "Node.js version: $(node --version)"
            echo "npm version: $(npm --version)"
            echo "PM2 version: $(pm2 --version)"
          '

      - name: Deploy
        run: |
          EC2_HOST=${{ needs.terraform.outputs.webec2host }}

          scp -o StrictHostKeyChecking=no -i privatekey.pem ./front-end-build.zip "ubuntu@$EC2_HOST:front-end-build.zip"

          ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" '
            unzip -o front-end-build.zip && cd front-end-build/ &&
            npm install
          '

          # CREATE THE MISSING SCRIPT
          ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" '
            cat <<EOF > start-serve.sh
          #!/bin/bash
          npx serve -s build
          EOF'

      - name: Make script executable
        run: |
          EC2_HOST=${{ needs.terraform.outputs.webec2host }}
          ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" '
            mv start-serve.sh front-end-build/ &&
            cd front-end-build/ &&
            chmod +x start-serve.sh
          '

      - name: Run with pm2
        run: |
          EC2_HOST=${{ needs.terraform.outputs.webec2host }}
          ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" '
            cd front-end-build/ &&
            # Stop and delete existing pm2 process if it exists
            if pm2 list | grep -q "pear-front-end"; then
              pm2 delete pear-front-end;
            fi &&
            pm2 start ./start-serve.sh --name pear-front-end
          '

  build-api:
    name: Build API
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install required dependencies
        run: npm install
        working-directory: pear-backend

      - name: Compile Typescript to Javascript
        run: npm run build-linux
        working-directory: pear-backend

      - name: Package application
        working-directory: pear-backend
        run: |
          mkdir -p api-build
          cp -r dist api-build/
          cp package.json api-build/
          zip -r api-build.zip api-build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-build
          path: pear-backend/api-build.zip

  deploy-api:
    name: Deploy API to EC2
    permissions:
      id-token: write
      contents: read
    needs:
      - build-api
      - terraform
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::804180393465:role/github-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secrets from AWS Key Store
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            API_EC2_PRIVATE_KEY, apiprivatekey
            POSTGRES_USER, postgresuser
            POSTGRES_PASS, postgrespass

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: api-build

      - name: Setup private key
        run: |
          echo "${{ env.API_EC2_PRIVATE_KEY }}" > privatekey.pem
          chmod 0500 privatekey.pem

      - name: Install Node.js and dependencies on EC2
        run: |
          EC2_HOST=${{ needs.terraform.outputs.apiec2host }}
          ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" '
            # Update package list
            sudo apt update
            
            # Install unzip, curl, and nginx
            sudo apt install -y unzip curl nginx
            
            # Install Node.js 20.x (LTS)
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
            
            # Install PM2 globally
            sudo npm install -g pm2
            
            # Start and enable nginx
            sudo systemctl start nginx
            sudo systemctl enable nginx
            
            # Verify installations
            echo "Node.js version: $(node --version)"
            echo "npm version: $(npm --version)"
            echo "PM2 version: $(pm2 --version)"
            echo "Nginx status: $(sudo systemctl is-active nginx)"
          '

      - name: Set env variables (SECURE)
        run: |
          EC2_HOST=${{ needs.terraform.outputs.apiec2host }}

          # Create .env file securely without logging sensitive data
          ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" << 'ENVEOF'
          echo "Creating secure environment file..."
          cat > /home/ubuntu/.env << 'EOF'
          DB_USER=${{ env.POSTGRES_USER }}
          DB_PASSWORD=${{ env.POSTGRES_PASS }}
          DB_HOST=${{ needs.terraform.outputs.dbhost }}
          DB_NAME=peardb
          NODE_ENV=production
          PORT=5000
          EOF

          # Set proper permissions
          chmod 600 /home/ubuntu/.env
          echo "Environment file created securely (no sensitive data logged)"
          ENVEOF

      - name: Deploy
        run: |
          EC2_HOST=${{ needs.terraform.outputs.apiec2host }}

          scp -o StrictHostKeyChecking=no -i privatekey.pem ./api-build.zip "ubuntu@$EC2_HOST:api-build.zip"

          ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" '
            unzip -o api-build.zip &&
            cd api-build/ &&
            
            # Copy environment file to the app directory
            cp /home/ubuntu/.env .
            
            npm install &&
            
            # Stop and delete existing pm2 process if it exists
            if pm2 list | grep -q "pear-api"; then
              pm2 delete pear-api;
            fi &&
            
            cd dist &&
            # Start with environment file
            pm2 start index.js --name pear-api
          '

  issue-certificates:
    needs:
      - deploy-api
      - terraform
    permissions:
      id-token: write
      contents: read
    name: Issue Certificates
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::804180393465:role/github-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secrets from AWS Key Store
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            API_EC2_PRIVATE_KEY, apiprivatekey

      - name: Setup private key
        run: |
          echo "${{ env.API_EC2_PRIVATE_KEY }}" > privatekey.pem
          chmod 0500 privatekey.pem

      - name: Setup nginx proxy
        run: |
          EC2_HOST=${{ needs.terraform.outputs.apiec2host }}
          ssh -o StrictHostKeyChecking=no -i privatekey.pem ubuntu@$EC2_HOST 'bash -s' <<'EOF'

          # Backup existing nginx config
          sudo cp /etc/nginx/sites-enabled/default /etc/nginx/sites-enabled/default.backup 2>/dev/null || true

          # Create new nginx configuration
          sudo tee /etc/nginx/sites-enabled/default > /dev/null <<'NGINX_CONF'
          server {
          listen 80;
          server_name bbd-grad-project.co.za www.bbd-grad-project.co.za;

          # Required for Certbot's HTTP-01 challenge
          location /.well-known/acme-challenge/ {
              root /var/www/html;
          }

          location / {
              proxy_pass http://localhost:3000; # Front-end
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host $host;
              proxy_cache_bypass $http_upgrade;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
          }

          location /public-api/ {
              proxy_pass http://localhost:5000/public-api/; # API
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host $host;
              proxy_cache_bypass $http_upgrade;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
          }
          }
          NGINX_CONF

          echo "Nginx configuration updated successfully"
          EOF

      - name: Verify and Reload nginx
        run: |
          EC2_HOST=${{ needs.terraform.outputs.apiec2host }}
          ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" '
            echo "Testing nginx configuration..."
            sudo nginx -t && echo "Nginx config is valid" || echo "Nginx config has errors"
            
            echo "Reloading nginx..."
            sudo systemctl reload nginx && echo "Nginx reloaded successfully" || echo "Nginx reload failed"
            
            echo "Nginx status:"
            sudo systemctl status nginx --no-pager -l
          '

    # - name: Certbot
    #   run: |
    #     EC2_HOST=${{ needs.terraform.outputs.apiec2host }}
    #     ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" '
    #       sudo apt install certbot python3-certbot-nginx -y &&
    #       sudo certbot --nginx -d bbd-grad-project.co.za -d www.bbd-grad-project.co.za --non-interactive --agree-tos --email shashin.gounden@bbd.co.za
    #     '

  flyway:
    needs:
      - terraform
      - deploy-frontend
      - deploy-api
    permissions:
      id-token: write
      contents: read
    name: Flyway Migrations
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::804180393465:role/github-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secrets from AWS Key Store
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            POSTGRES_USER, postgresuser
            POSTGRES_PASS, postgrespass

      - name: Debug Database Connection
        run: |
          echo "Testing database connection..."
          echo "Host: ${{ needs.terraform.outputs.dbhost }}"
          echo "User: ${{ env.POSTGRES_USER }}"
          echo "Database: peardb"

          # Test connection with psql
          docker run --rm postgres:16 psql \
            -h ${{ needs.terraform.outputs.dbhost }} \
            -U ${{ env.POSTGRES_USER }} \
            -d peardb \
            -c "SELECT version();" || echo "Connection failed"
        env:
          PGPASSWORD: ${{ env.POSTGRES_PASS }}

      - name: Run Flyway Migrations
        run: |
          docker run --rm --volume ${{ github.workspace }}/migrations:/flyway/sql:ro redgate/flyway -url="jdbc:postgresql://${{ needs.terraform.outputs.dbhost }}/peardb" -user="${{ env.POSTGRES_USER }}" -password="${{ env.POSTGRES_PASS }}" migrate
